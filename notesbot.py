import telebot
from telebot import types
from datetime import datetime as dt
import threading

TOKEN = 'token'
bot = telebot.TeleBot(TOKEN)


class User:
    def __init__(self, user_id):
        self.user_id = user_id
        self.tasks = []
        self.reminders = []


users = {}


@bot.message_handler(commands=['start', 'help'])
def start(message):
    user_id = message.from_user.id
    if user_id not in users:
        users[user_id] = User(user_id)
    start_message = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á.\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏:\n\n"
        "‚ûï /add - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É\n"
        "üìã /list - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n"
        "‚úÖ /done - –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É\n"
        "‚ûï /remind - –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
        "‚ûñ /remind_remove - —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
        "üìã /remind_list - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π \n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"
    )
    bot.send_message(user_id, start_message)


@bot.message_handler(commands=['add'])
def add_task(message):
    user_id = message.from_user.id
    if user_id not in users:
        users[user_id] = User(user_id)
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    bot.register_next_step_handler(message, process_new_task)


def process_new_task(message):
    user_id = message.from_user.id
    if user_id not in users:
        users[user_id] = User(user_id)
    task_description = message.text
    users[user_id].tasks.append(task_description)
    bot.send_message(user_id, "–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")


@bot.message_handler(commands=['list'])
def list_tasks(message):
    user_id = message.from_user.id
    tasks = users[user_id].tasks
    if not tasks:
        bot.send_message(user_id, "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç.", reply_markup=types.ReplyKeyboardRemove())
    else:
        task_list = "\n".join(f"{index + 1}. {task}" for index, task in enumerate(tasks))
        bot.send_message(user_id, "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n" + task_list)


@bot.message_handler(commands=['done'])
def mark_done(message):
    user_id = message.from_user.id
    if user_id not in users:
        users[user_id] = User(user_id)
    tasks = users[user_id].tasks
    if not tasks:
        bot.send_message(user_id, "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç.")
        return

    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    task_buttons = [types.KeyboardButton(task) for task in tasks]
    back_button = types.KeyboardButton("–ù–∞–∑–∞–¥")
    markup.add(*task_buttons, back_button)

    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(message, process_done_task)


def process_done_task(message):
    user_id = message.from_user.id
    task_done = message.text
    if task_done in users[user_id].tasks:
        users[user_id].tasks.remove(task_done)
        bot.send_message(user_id, f"–ó–∞–¥–∞—á–∞ '{task_done}' –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.")
    elif task_done == '–ù–∞–∑–∞–¥':
        bot.send_message(user_id, "–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", reply_markup=types.ReplyKeyboardRemove())
        start(message)
    else:
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –∏–∑ —Å–ø–∏—Å–∫–∞.")


@bot.message_handler(commands=['remind'])
def remind_task(message):
    user_id = message.from_user.id
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì –ß–ß:–ú–ú")
    bot.register_next_step_handler(message, process_remind_datetime)


def process_remind_datetime(message):
    user_id = message.from_user.id
    datetime_str = message.text
    try:
        remind_datetime = dt.strptime(datetime_str, '%d.%m.%y %H:%M')
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
        bot.register_next_step_handler(message, lambda msg: process_remind_text(msg, remind_datetime))
    except ValueError:
        bot.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì –ß–ß:–ú–ú.")


def process_remind_text(message, remind_datetime):
    user_id = message.from_user.id
    remind_text = message.text

    current_datetime = dt.now()
    time_difference = (remind_datetime - current_datetime).total_seconds()

    if time_difference > 0:
        if user_id in users:
            users[user_id].reminders.append((remind_datetime, remind_text))
        else:
            users[user_id] = User(user_id)
            users[user_id].reminders.append((remind_datetime, remind_text))

        threading.Timer(time_difference, send_reminder, args=(user_id, remind_text)).start()
        bot.send_message(user_id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {remind_datetime.strftime('%d.%m.%y %H:%M')}.")
    else:
        bot.send_message(user_id, "–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.")


def send_reminder(user_id, remind_text):
    bot.send_message(user_id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {remind_text}")
    if user_id in users:
        user = users[user_id]
        user.reminders = [(remind_datetime, text) for remind_datetime, text in user.reminders if text != remind_text]


@bot.message_handler(commands=['remind_list'])
def remind_list(message):
    user_id = message.from_user.id
    if user_id in users:
        reminders = users[user_id].reminders
        if reminders:
            remind_list = "\n".join(
                f"{index + 1}. {remind[1]} - {remind[0].strftime('%d.%m.%y %H:%M')}" for index, remind in
                enumerate(reminders))
            bot.send_message(user_id, "–°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:\n" + remind_list)
        else:
            bot.send_message(user_id, "–°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø—É—Å—Ç.")
    else:
        bot.send_message(user_id, "–°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø—É—Å—Ç.")


@bot.message_handler(commands=['remind_remove'])
def remind_remove(message):
    user_id = message.from_user.id
    if user_id in users:
        reminders = users[user_id].reminders
        if reminders:
            markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
            reminder_buttons = [types.KeyboardButton(remind[1]) for remind in reminders]
            back_button = types.KeyboardButton("–ù–∞–∑–∞–¥")
            markup.add(*reminder_buttons, back_button)
            bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
            bot.register_next_step_handler(message, process_remind_remove)
        else:
            bot.send_message(user_id, "–°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø—É—Å—Ç.")
    else:
        bot.send_message(user_id, "–°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø—É—Å—Ç.")


def process_remind_remove(message):
    user_id = message.from_user.id
    text = message.text

    if text == "–ù–∞–∑–∞–¥":
        bot.send_message(user_id, "–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", reply_markup=types.ReplyKeyboardRemove())
        start(message)
    else:
        if user_id in users:
            user = users[user_id]
            if any(remind[1] == text for remind in user.reminders):
                user.reminders = [(remind_datetime, remind_text) for remind_datetime, remind_text in user.reminders if
                                  remind_text != text]
                bot.send_message(user_id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ '{text}' —É–¥–∞–ª–µ–Ω–æ.")
                remind_list(message)
            else:
                bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥'.")
        else:
            bot.send_message(user_id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")


if __name__ == '__main__':
    bot.polling(none_stop=True)
